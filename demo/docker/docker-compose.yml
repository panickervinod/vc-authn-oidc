version: "3"
services:
  #
  # oidc-django
  # -------------------------------------------------
  # The container performs the migrations, therefore
  # it needs to come up after the database.
  #
  oidc-django:
    image: oidc-django
    environment:
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      APP_SCRIPT: ${APP_SCRIPT}
      STI_SCRIPTS_PATH: ${STI_SCRIPTS_PATH}
      DATABASE_SERVICE_HOST: ${DATABASE_SERVICE_HOST}
      DATABASE_SERVICE_PORT: ${DATABASE_SERVICE_PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_ADMIN_USER: ${DJANGO_ADMIN_USER}
      DJANGO_ADMIN_PASSWORD: ${DJANGO_ADMIN_PASSWORD}
      DJANGO_ADMIN_EMAIL: ${DJANGO_ADMIN_EMAIL}
      OIDC_RP_PROVIDER_ENDPOINT: ${OIDC_RP_PROVIDER_ENDPOINT}
      OIDC_RP_CLIENT_ID: ${OIDC_RP_CLIENT_ID}
      OIDC_RP_CLIENT_SECRET: ${OIDC_RP_CLIENT_SECRET}
      OIDC_RP_SCOPES: ${OIDC_RP_SCOPES}
      VC_AUTHN_PRES_REQ_CONF_ID: ${VC_AUTHN_PRES_REQ_CONF_ID}
    volumes:
      - ../oidc-django:/opt/app-root/src
    ports:
      - "8080:8080"
    depends_on:
      - database
    command: >
      /bin/bash -c "
      echo waiting for database ...;
      sleep 5;
      if [ $DEBUG ] && [ "$DEBUG" == "True" ]; then
      echo Running in debug mode;
        python manage.py migrate;
        python manage.py runserver 0.0.0.0:8080;
      else
        echo Running s2i container...;
        env;
        ${STI_SCRIPTS_PATH}/run;
      fi"

  database:
    image: registry.access.redhat.com/rhscl/postgresql-10-rhel7:latest
    environment:
      POSTGRESQL_USER: ${POSTGRESQL_USER}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
    ports:
      - ${EXPOSED_DATABASE_SERVICE_PORT}:5432
    volumes:
      - db-volume:/var/lib/pgsql/data

volumes:
  db-volume:
